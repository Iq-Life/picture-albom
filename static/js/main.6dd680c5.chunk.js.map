{"version":3,"sources":["components/scoreboard/actionAreaCard/ActionAreaCard.tsx","components/navigationBar/pagination/PaginationRounded.tsx","components/navigationBar/select/ControlledSelect.tsx","components/navigationBar/NavigationBar.tsx","redux/reducers/getPictures.ts","api/pictures-api.ts","redux/picture-reducer.ts","components/scoreboard/Scoreboard.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.ts","index.tsx","components/scoreboard/Scoreboard.module.scss","App.module.scss","components/navigationBar/NavigationBar.module.scss"],"names":["ActionAreaCard","memo","text","thumbnailUrl","id","fullImageUrl","useState","toggle","setToggle","minimizePhoto","Modal","open","onClose","aria-labelledby","aria-describedby","Box","sx","position","top","left","transform","boxShadow","src","alt","onClick","Card","width","bgcolor","CardActionArea","CardMedia","component","height","image","CardContent","Typography","color","gutterBottom","variant","PaginationRounded","pagesCount","currentPage","setCurrentPage","Stack","spacing","Pagination","marginRight","count","shape","siblingCount","onChange","_","page","ControlledSelect","setCurrentAlbum","albums","albumId","setAlbumId","openSelect","setOpenSelect","MenuProps","PaperProps","style","maxHeight","itemHeight","minWidth","backgroundColor","setAlbums","map","album","MenuItem","value","title","FormControl","m","InputLabel","Select","labelId","onOpen","label","event","target","Number","NavigationBar","limit","totalPicturesCount","Math","ceil","className","navigationBar","getPictures","state","pictureReducer","pictures","getLimit","getStart","start","getTotalPicturesCount","getCurrentPage","getCurrentAlbum","currentAlbum","getAlbums","instance","axios","create","baseURL","picturesApi","get","initialState","setPictureAC","data","type","totalPicturesCountAC","fetchAlbumPictures","dispatch","getState","then","res","currentAlbumId","headers","Scoreboard","useSelector","useDispatch","useEffect","fetchPictures","useCallback","setCurrentPageAC","removePictures","picturesId","removePicturesAC","content","picture","tileFragment","deleteIcon","containerActionAreaCard","url","scoreboard","tile","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducersBatch","combineReducers","action","filter","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"0RASaA,EAAyCC,gBAAK,YAGQ,IAFHC,EAEE,EAFFA,KAAMC,EAEJ,EAFIA,aACNC,EACE,EADFA,GAAIC,EACF,EADEA,aACF,EAElCC,oBAAkB,GAFgB,mBAEvDC,EAFuD,KAE/CC,EAF+C,KAGxDC,EAAgB,kBAAMD,GAAU,IAWtC,OACI,gCACKD,EACG,cAACG,EAAA,EAAD,CACIC,KAAMJ,EACNK,QAASH,EACTI,kBAAgB,oBAChBC,mBAAiB,0BAJrB,SAMI,cAACC,EAAA,EAAD,CAAKC,GAjBJ,CACbC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,wBACXC,UAAW,IAYC,SACI,qBAAKC,IAAKjB,EAAckB,IAAK,YAAaC,QAASf,QAGzD,GACN,cAACgB,EAAA,EAAD,CAAMT,GAAI,CAACU,MAAO,IAAKC,QAAS,WAAhC,SACI,eAACC,EAAA,EAAD,CAAgBJ,QAzBR,kBAAMhB,GAAU,IAyBxB,UACI,cAACqB,EAAA,EAAD,CACIC,UAAU,MACVC,OAAO,MACPC,MAAO7B,EACPoB,IAAI,iBAER,eAACU,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAYlB,GAAI,CAACmB,MAAO,SAAUC,cAAY,EAACC,QAAQ,KAAKP,UAAU,MAAtE,uBACe1B,KAEf,cAAC8B,EAAA,EAAD,CAAYlB,GAAI,CAACmB,MAAO,aAAcE,QAAQ,QAAQF,MAAM,iBAA5D,SACKjC,kB,mCChDhBoC,EAA+CrC,gBAAK,YAEQ,IADHsC,EACE,EADFA,WAAYC,EACV,EADUA,YAAaC,EACvB,EADuBA,eAG3F,OACI,cAACC,EAAA,EAAD,CAAOC,QAAS,EAAhB,SACI,cAACC,EAAA,EAAD,CACI5B,GAAI,CAAC6B,YAAa,GAClBV,MAAO,UACPW,MAAOP,EACPF,QAAQ,WACRU,MAAM,UACNC,aAAc,EACdC,SAAU,SAACC,EAAGC,GAAJ,OAAaV,EAAeU,IACtCA,KAAMX,S,oCCZTY,EAA6CnD,gBAAK,YAEQ,IADHoD,EACE,EADFA,gBAAiBC,EACf,EADeA,OACf,EAEpChD,mBAA0B,IAFU,mBAE3DiD,EAF2D,KAElDC,EAFkD,OAG9BlD,oBAAS,GAHqB,mBAG3DmD,EAH2D,KAG/CC,EAH+C,KAoB5DC,EAAY,CACdC,WAAY,CACRC,MAAO,CACHC,UAAWC,IACXC,SAAU,IACVC,gBAAiB,UACjB9B,MAAO,aAKb+B,EAAYZ,EAAOa,KACrB,SAAAC,GAAK,OAAK,eAACC,EAAA,EAAD,CAAyBC,MAAOF,EAAMhE,GAAtC,UAA2CgE,EAAMhE,GAAjD,KAAuDgE,EAAMG,QAA9CH,EAAMhE,OAEnC,OACI,8BACI,eAACoE,EAAA,EAAD,CAAaxD,GAAI,CAACyD,EAAG,EAAGT,SAAU,KAAlC,UACI,cAACU,EAAA,EAAD,CAAYtE,GAAG,+BAAf,oBACA,eAACuE,EAAA,EAAD,CACIC,QAAQ,+BACRxE,GAAG,yBACHO,KAAM8C,EACN7C,QAhCF,WACV8C,GAAc,IAgCFmB,OA7BH,WACTnB,GAAc,IA6BFY,MAAOf,EACPuB,MAAM,QACN7B,SAzCK,SAAC8B,GAClBvB,EAAWuB,EAAMC,OAAOV,OACxBjB,EAAgB4B,OAAOF,EAAMC,OAAOV,SAwCxBX,UAAWA,EATf,UAWI,cAACU,EAAA,EAAD,CAAUC,MAAM,GAAhB,SACI,uCAEHJ,aCtDRgB,EAAuCjF,gBAAK,YAGQ,IAFHkF,EAEE,EAFFA,MAAO9B,EAEL,EAFKA,gBAAiB+B,EAEtB,EAFsBA,mBACxB3C,EACE,EADFA,eAAgBD,EACd,EADcA,YAAac,EAC3B,EAD2BA,OAGnFf,EAAa8C,KAAKC,KAAKF,EAAqBD,GAEhD,OACI,sBAAKI,UAAW1B,IAAM2B,cAAtB,UACI,8BACI,cAACpC,EAAD,CAAkBC,gBAAiBA,EAAiBC,OAAQA,MAEhE,8BACI,cAAChB,EAAD,CACIG,eAAgB,SAACU,GAAD,OAAWV,EAAeU,IAC1CX,YAAaA,EACbD,WAAYA,Y,QCpBnBkD,EAAc,SAACC,GAAD,OAAwCA,EAAMC,eAAeC,UAC3EC,EAAW,SAACH,GAAD,OAAiCA,EAAMC,eAAeR,OACjEW,EAAW,SAACJ,GAAD,OAAiCA,EAAMC,eAAeI,OACjEC,EAAwB,SAACN,GAAD,OAAgCA,EAAMC,eAAeP,oBAC7Ea,EAAiB,SAACP,GAAD,OAAiCA,EAAMC,eAAenD,aACvE0D,EAAkB,SAACR,GAAD,OAAgCA,EAAMC,eAAeQ,cACvEC,EAAY,SAACV,GAAD,OAAsCA,EAAMC,eAAerC,Q,wBCPvE+C,E,OAAWC,EAAMC,OAAO,CACjCC,QAAS,yCAGAC,EAAc,SAEDV,EAAcZ,GAChC,OAAOkB,EAASK,IAAT,wBAA6CX,EAA7C,mBAA6DZ,KAH/DsB,EAAc,SAKNlD,EAAgBwC,EAAcZ,GAC3C,OAAOkB,EAASK,IAAT,iBAAsCnD,EAAtC,0BAA+DwC,EAA/D,mBAA+EZ,KANjFsB,EAAc,WASnB,OAAOJ,EAASK,IAAT,WCXXC,EAAiC,CACjCf,SAAU,GACVtC,OAAQ,GACR6C,aAAc,EACdJ,MAAO,EACPZ,MAAO,GACPC,mBAAoB,EACpB5C,YAAa,GA+BJoE,EAAe,SAACC,GACzB,MAAO,CAACC,KAAM,eAAgBD,SAQrBE,EAAuB,SAAC3B,GACjC,MAAO,CAAC0B,KAAM,uBAAwB1B,uBAgB7B4B,EAAqB,SAACzD,EAAiBwC,EAAeZ,GAAjC,OAA+D,SAAC8B,EAAUC,GACxGT,EAA6BlD,EAASwC,EAAOZ,GAAOgC,MAAK,SAACC,GACtDH,EAASL,EAAaQ,EAAIP,OAC1B,IAAMQ,EAAiBH,IAAWvB,eAAeQ,aAC7C5C,IAAY8D,IACZJ,EAASF,EAAqB9B,OAAOmC,EAAIE,QAAQ,oBACjDL,EAnBD,CAACH,KAAM,mBAAoBzD,gBAmBEE,UC1D3BgE,EAAiBtH,gBAAK,WAE/B,IAAM2F,EAAW4B,YAAY/B,GACvBnC,EAASkE,YAAYpB,GACrBjB,EAAQqC,YAAY3B,GACpBE,EAAQyB,YAAY1B,GACpBV,EAAqBoC,YAAYxB,GACjCxD,EAAcgF,YAAYvB,GAC1BE,EAAeqB,YAAYtB,GAE3Be,EAAWQ,cAEjBC,qBAAU,WACNT,GDiDqC,SAACA,GAC1CR,IAAwBU,MAAK,SAACC,GAC1BH,EAtBG,CAACH,KAAM,aAAcxD,OAsBH8D,EAAIP,eClD1B,CAACI,IAEJS,qBAAU,WAEFT,EADAd,EACSa,EAAmBb,EAAcJ,EAAOZ,GD4BhC,SAACY,EAAeZ,GAAhB,OAA8C,SAAC8B,GACxER,EAAkCV,EAAOZ,GAAOgC,MAAK,SAACC,GAClDH,EAASF,EAAqB9B,OAAOmC,EAAIE,QAAQ,oBACjDL,EAASL,EAAaQ,EAAIP,WC7Bbc,CAAc5B,EAAOZ,MAEnC,CAACgB,EAAcJ,EAAOZ,EAAO8B,IAGhC,IAAMxE,EAAiBmF,uBAAY,SAACzE,GAChC8D,EDMwB,SAACzE,GAC7B,MAAO,CAACsE,KAAM,mBAAoBtE,eCPrBqF,CAAiB1E,MAC3B,CAAC8D,IACE5D,EAAkBuE,uBAAY,SAACrE,EAAiBwC,EAAeZ,GACjE8B,EAASD,EAAmBzD,EAASwC,EAAOZ,MAC7C,CAAC8B,IACEa,EAAiBF,uBAAY,SAACG,GAChCd,EDHwB,SAACc,GAC7B,MAAO,CAACjB,KAAM,kBAAmBiB,cCEpBC,CAAiBD,MAC3B,CAACd,IAEEgB,EAAUrC,EAASzB,KAAI,SAAC+D,GAAD,OACzB,sBAAK3C,UAAW1B,IAAMsE,aAAtB,UACI,wBAAQ5C,UAAW1B,IAAMuE,WAAY5G,QAAS,kBAAMsG,EAAeI,EAAQ9H,KAA3E,eAGA,qBAAKmF,UAAW1B,IAAMwE,wBAAtB,SACI,cAACrI,EAAD,CAAgBI,GAAI8H,EAAQ9H,GACZD,aAAc+H,EAAQ/H,aACtBE,aAAc6H,EAAQI,IACtBpI,KAAMgI,EAAQ3D,YARG2D,EAAQ9H,OAarD,OACI,sBAAKmF,UAAW1B,IAAM0E,WAAtB,UACI,cAACrD,EAAD,CACIC,MAAOA,EACPC,mBAAoBA,EACpB5C,YAAaA,EACbC,eAAgBA,EAChBa,OAAQA,EACRD,gBAAiB,SAACE,GAAD,OAAaF,EAAgBE,EAASwC,EAAOZ,MAElE,qBAAKI,UAAW1B,IAAM2E,KAAtB,SACKP,UCxEJQ,EAAU,WACnB,OACI,sBAAKlD,UAAW1B,IAAM4E,IAAtB,UACI,qBAAKlD,UAAW1B,IAAMU,MAAtB,SACI,iDAEJ,cAACgD,EAAD,QCIGmB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,kBCJHO,GAAgBC,aAAgB,CACvCxD,eJQ0B,WAAkE,IAAjED,EAAgE,uDAAxDiB,EAAcyC,EAA0C,uCAC3F,OAAQA,EAAOtC,MACX,IAAK,eACD,OAAO,2BAAIpB,GAAX,IAAkBE,SAAUwD,EAAOvC,OAEvC,IAAK,aACD,OAAO,2BAAInB,GAAX,IAAkBpC,OAAQ8F,EAAO9F,SAErC,IAAK,kBACD,OAAO,2BACAoC,GADP,IACcE,SAAU,YAAIF,EAAME,UAAUyD,QACpC,SAACzD,GAAD,OAAcA,EAASxF,KAAOgJ,EAAOrB,gBAGjD,IAAK,mBACD,OAAO,2BAAIrC,GAAX,IAAkBlD,YAAa4G,EAAO5G,YAAauD,OAAQqD,EAAO5G,YAAc,GAAKkD,EAAMP,QAE/F,IAAK,uBACD,OAAO,2BAAIO,GAAX,IAAkBN,mBAAoBgE,EAAOhE,qBAEjD,IAAK,mBACD,OAAO,2BAAIM,GAAX,IAAkBS,aAAciD,EAAO/F,gBAAiBb,YAAa,EAAGuD,MAAO,IAEnF,QACI,OAAOL,MItBJ4D,GAPHC,aAAYL,GAAeM,aAAgBC,OCDvDC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACI,cAAC,EAAD,QAGRO,SAASC,eAAe,SAO5BpB,K,mBCpBAqB,EAAOC,QAAU,CAAC,WAAa,+BAA+B,KAAO,yBAAyB,aAAe,iCAAiC,WAAa,iC,mBCA3JD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,MAAQ,qB,mBCAjDD,EAAOC,QAAU,CAAC,cAAgB,uC","file":"static/js/main.6dd680c5.chunk.js","sourcesContent":["import {FC, memo, useState} from \"react\";\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport Typography from '@mui/material/Typography';\r\nimport {CardActionArea} from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Modal from '@mui/material/Modal';\r\n\r\nexport const ActionAreaCard: FC<ActionAreaCardType> = memo(({\r\n                                                                text, thumbnailUrl,\r\n                                                                id, fullImageUrl\r\n                                                            }) => {\r\n\r\n    const [toggle, setToggle] = useState<boolean>(false)\r\n    const minimizePhoto = () => setToggle(false)\r\n    const expandPhoto = () => setToggle(true)\r\n\r\n    const styleBox = {\r\n        position: 'absolute' as 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        boxShadow: 34,\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {toggle ?\r\n                <Modal\r\n                    open={toggle}\r\n                    onClose={minimizePhoto}\r\n                    aria-labelledby=\"modal-modal-title\"\r\n                    aria-describedby=\"modal-modal-description\"\r\n                >\r\n                    <Box sx={styleBox}>\r\n                        <img src={fullImageUrl} alt={'full size'} onClick={minimizePhoto}/>\r\n                    </Box>\r\n                </Modal>\r\n                : ''}\r\n            <Card sx={{width: 345, bgcolor: '#1e1e1e'}}>\r\n                <CardActionArea onClick={expandPhoto}>\r\n                    <CardMedia\r\n                        component=\"img\"\r\n                        height=\"140\"\r\n                        image={thumbnailUrl}\r\n                        alt=\"green iguana\"\r\n                    />\r\n                    <CardContent>\r\n                        <Typography sx={{color: 'white'}} gutterBottom variant=\"h5\" component=\"div\">\r\n                            photo id: {id}\r\n                        </Typography>\r\n                        <Typography sx={{color: '#ffffffb3'}} variant=\"body2\" color=\"text.secondary\">\r\n                            {text}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n            </Card>\r\n        </div>\r\n    );\r\n})\r\n//type\r\ntype ActionAreaCardType = {\r\n    id: number\r\n    text: string\r\n    thumbnailUrl: string\r\n    fullImageUrl: string\r\n}","import {FC, memo} from 'react';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport Stack from '@mui/material/Stack';\r\n\r\n\r\nexport const PaginationRounded: FC<PaginationRoundedType> = memo(({\r\n                                                                      pagesCount, currentPage, setCurrentPage\r\n                                                                  }) => {\r\n\r\n    return (\r\n        <Stack spacing={2}>\r\n            <Pagination\r\n                sx={{marginRight: 1}}\r\n                color={\"primary\"}\r\n                count={pagesCount}\r\n                variant=\"outlined\"\r\n                shape=\"rounded\"\r\n                siblingCount={2}\r\n                onChange={(_, page) => setCurrentPage(page)}\r\n                page={currentPage}\r\n            />\r\n        </Stack>\r\n    );\r\n})\r\n//type\r\ntype PaginationRoundedType = {\r\n    setCurrentPage: (page: number) => void\r\n    pagesCount: number\r\n    currentPage: number\r\n}\r\n","import {FC, memo, useState} from \"react\";\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select, {SelectChangeEvent} from '@mui/material/Select';\r\nimport {AlbumsType} from \"../../../api/pictures-api\";\r\n\r\nexport const ControlledSelect: FC<ControlledSelectType> = memo(({\r\n                                                                    setCurrentAlbum, albums\r\n                                                                }) => {\r\n\r\n    const [albumId, setAlbumId] = useState<string | number>('');\r\n    const [openSelect, setOpenSelect] = useState(false);\r\n\r\n    const handleChange = (event: SelectChangeEvent<typeof albumId>) => {\r\n        setAlbumId(event.target.value);\r\n        setCurrentAlbum(Number(event.target.value))\r\n    };\r\n\r\n    const close = () => {\r\n        setOpenSelect(false);\r\n    };\r\n\r\n    const open = () => {\r\n        setOpenSelect(true);\r\n    };\r\n\r\n    const itemHeight = 48;\r\n    const itemPaddingTop = 8;\r\n    const MenuProps = {\r\n        PaperProps: {\r\n            style: {\r\n                maxHeight: itemHeight * 4.5 + itemPaddingTop,\r\n                minWidth: 120,\r\n                backgroundColor: '#20262d',\r\n                color: '#1976d2'\r\n            },\r\n        },\r\n    };\r\n\r\n    const setAlbums = albums.map(\r\n        album => (<MenuItem key={album.id} value={album.id}>{album.id}. {album.title}</MenuItem>))\r\n\r\n    return (\r\n        <div>\r\n            <FormControl sx={{m: 1, minWidth: 120}}>\r\n                <InputLabel id=\"controlled-open-select-label\">Albums</InputLabel>\r\n                <Select\r\n                    labelId=\"controlled-open-select-label\"\r\n                    id=\"controlled-open-select\"\r\n                    open={openSelect}\r\n                    onClose={close}\r\n                    onOpen={open}\r\n                    value={albumId}\r\n                    label=\"Album\"\r\n                    onChange={handleChange}\r\n                    MenuProps={MenuProps}\r\n                >\r\n                    <MenuItem value=\"\">\r\n                        <em>all</em>\r\n                    </MenuItem>\r\n                    {setAlbums}\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n})\r\n//type\r\ntype ControlledSelectType = {\r\n    albums: AlbumsType[]\r\n    setCurrentAlbum: (albumId: number) => void\r\n}\r\n\r\n","import {FC, memo} from \"react\";\r\nimport style from './NavigationBar.module.scss'\r\nimport {PaginationRounded} from \"./pagination/PaginationRounded\";\r\nimport {ControlledSelect} from \"./select/ControlledSelect\";\r\nimport {AlbumsType} from \"../../api/pictures-api\";\r\n\r\n\r\nexport const NavigationBar: FC<NavigationBarType> = memo(({\r\n                                                              limit, setCurrentAlbum, totalPicturesCount,\r\n                                                              setCurrentPage, currentPage, albums\r\n                                                          }) => {\r\n\r\n    let pagesCount = Math.ceil(totalPicturesCount / limit)\r\n\r\n    return (\r\n        <div className={style.navigationBar}>\r\n            <div>\r\n                <ControlledSelect setCurrentAlbum={setCurrentAlbum} albums={albums}/>\r\n            </div>\r\n            <div>\r\n                <PaginationRounded\r\n                    setCurrentPage={(page) => (setCurrentPage(page))}\r\n                    currentPage={currentPage}\r\n                    pagesCount={pagesCount}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n//type\r\ntype NavigationBarType = {\r\n    limit: number\r\n    totalPicturesCount: number\r\n    currentPage: number\r\n    albums: AlbumsType[]\r\n    setCurrentPage: (page: number) => void\r\n    setCurrentAlbum: (albumId: number) => void\r\n}","import {AppStateType} from \"../redux-store\";\r\nimport {AlbumsType, PictureType} from \"../../api/pictures-api\";\r\n\r\nexport const getPictures = (state: AppStateType): PictureType[] => state.pictureReducer.pictures\r\nexport const getLimit = (state: AppStateType): number => state.pictureReducer.limit\r\nexport const getStart = (state: AppStateType): number => state.pictureReducer.start\r\nexport const getTotalPicturesCount = (state: AppStateType): number=> state.pictureReducer.totalPicturesCount\r\nexport const getCurrentPage = (state: AppStateType): number => state.pictureReducer.currentPage\r\nexport const getCurrentAlbum = (state: AppStateType): number=> state.pictureReducer.currentAlbum\r\nexport const getAlbums = (state: AppStateType): AlbumsType[]=> state.pictureReducer.albums","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'http://jsonplaceholder.typicode.com/'\r\n})\r\n\r\nexport const picturesApi = {\r\n\r\n    getPicturesInPortions(start:number, limit:number) {\r\n        return instance.get<PictureType[]>(`photos?_start=${start}&_limit=${limit}`)\r\n    },\r\n    getAlbumPictures(albumId:number, start:number, limit:number){\r\n        return instance.get<PictureType[]>(`albums/${albumId}/photos?_start=${start}&_limit=${limit}`)\r\n    },\r\n    getAlbums() {\r\n        return instance.get<AlbumsType[]>(`albums`)\r\n    }\r\n}\r\n\r\n\r\n\r\n//types & enum\r\nexport type PictureType = {\r\n    albumId: number\r\n    id: number\r\n    title: string\r\n    url: string\r\n    thumbnailUrl: string\r\n}\r\nexport type AlbumsType ={\r\n    userId: number\r\n    id: number\r\n    title: string\r\n}","import {AlbumsType, picturesApi, PictureType} from \"../api/pictures-api\";\r\nimport {ThunksType} from \"./redux-store\";\r\n\r\n\r\nlet initialState: initialStateType = {\r\n    pictures: [],\r\n    albums: [],\r\n    currentAlbum: 0,\r\n    start: 0,\r\n    limit: 20,\r\n    totalPicturesCount: 0,\r\n    currentPage: 1\r\n}\r\n\r\nexport const pictureReducer = (state = initialState, action: ActionTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_PICTURES\": {\r\n            return {...state, pictures: action.data}\r\n        }\r\n        case \"SET_ALBUMS\": {\r\n            return {...state, albums: action.albums}\r\n        }\r\n        case \"REMOVE_PICTURES\": {\r\n            return {\r\n                ...state, pictures: [...state.pictures].filter(\r\n                    (pictures) => pictures.id !== action.picturesId)\r\n            }\r\n        }\r\n        case \"SET_CURRENT_PAGE\": {\r\n            return {...state, currentPage: action.currentPage, start: (action.currentPage - 1) * state.limit}\r\n        }\r\n        case \"TOTAL_PICTURES_COUNT\": {\r\n            return {...state, totalPicturesCount: action.totalPicturesCount}\r\n        }\r\n        case \"SET_SELECT_ALBUM\": {\r\n            return {...state, currentAlbum: action.setCurrentAlbum, currentPage: 1, start: 0}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//action\r\nexport const setPictureAC = (data: PictureType[]) => {\r\n    return {type: \"SET_PICTURES\", data} as const\r\n}\r\nexport const removePicturesAC = (picturesId: number) => {\r\n    return {type: \"REMOVE_PICTURES\", picturesId} as const\r\n}\r\nexport const setCurrentPageAC = (currentPage: number) => {\r\n    return {type: \"SET_CURRENT_PAGE\", currentPage} as const\r\n}\r\nexport const totalPicturesCountAC = (totalPicturesCount: number) => {\r\n    return {type: \"TOTAL_PICTURES_COUNT\", totalPicturesCount} as const\r\n}\r\nexport const setSelectedAlbumAC = (currentAlbum: number) => {\r\n    return {type: \"SET_SELECT_ALBUM\", setCurrentAlbum: currentAlbum} as const\r\n}\r\nexport const setAlbumsAC = (albums: AlbumsType[]) => {\r\n    return {type: \"SET_ALBUMS\", albums} as const\r\n}\r\n\r\n//thunks\r\nexport const fetchPictures = (start: number, limit: number): ThunksType => (dispatch) => {\r\n    picturesApi.getPicturesInPortions(start, limit).then((res) => {\r\n        dispatch(totalPicturesCountAC(Number(res.headers[\"x-total-count\"])))\r\n        dispatch(setPictureAC(res.data))\r\n    })\r\n}\r\nexport const fetchAlbumPictures = (albumId: number, start: number, limit: number): ThunksType => (dispatch, getState) => {\r\n    picturesApi.getAlbumPictures(albumId, start, limit).then((res) => {\r\n        dispatch(setPictureAC(res.data))\r\n        const currentAlbumId = getState().pictureReducer.currentAlbum;\r\n        if (albumId !== currentAlbumId) {\r\n            dispatch(totalPicturesCountAC(Number(res.headers[\"x-total-count\"])))\r\n            dispatch(setSelectedAlbumAC(albumId))\r\n        }\r\n    })\r\n}\r\nexport const fetchAlbums = (): ThunksType => (dispatch) => {\r\n    picturesApi.getAlbums().then((res) => {\r\n        dispatch(setAlbumsAC(res.data))\r\n    })\r\n}\r\n//types\r\nexport type ActionTypes =\r\n    ReturnType<typeof setPictureAC> | ReturnType<typeof setCurrentPageAC> |\r\n    ReturnType<typeof totalPicturesCountAC> | ReturnType<typeof removePicturesAC> |\r\n    ReturnType<typeof setSelectedAlbumAC> | ReturnType<typeof setAlbumsAC>\r\n\r\nexport type initialStateType = {\r\n    pictures: PictureType[]\r\n    albums: AlbumsType[]\r\n    currentAlbum: number\r\n    start: number\r\n    limit: number\r\n    totalPicturesCount: number\r\n    currentPage: number\r\n}","import {FC, memo, useCallback, useEffect} from \"react\";\r\nimport style from \"./Scoreboard.module.scss\";\r\nimport {ActionAreaCard} from \"./actionAreaCard/ActionAreaCard\";\r\nimport {NavigationBar} from \"../navigationBar/NavigationBar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getAlbums,\r\n    getCurrentAlbum, getCurrentPage, getLimit,\r\n    getPictures, getStart, getTotalPicturesCount\r\n} from \"../../redux/reducers/getPictures\";\r\nimport {\r\n    fetchAlbumPictures, fetchAlbums, fetchPictures,\r\n    removePicturesAC, setCurrentPageAC\r\n} from \"../../redux/picture-reducer\";\r\n\r\n\r\nexport const Scoreboard: FC = memo(() => {\r\n\r\n    const pictures = useSelector(getPictures)\r\n    const albums = useSelector(getAlbums)\r\n    const limit = useSelector(getLimit)\r\n    const start = useSelector(getStart)\r\n    const totalPicturesCount = useSelector(getTotalPicturesCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const currentAlbum = useSelector(getCurrentAlbum)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchAlbums())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (currentAlbum) {\r\n            dispatch(fetchAlbumPictures(currentAlbum, start, limit))\r\n        } else {\r\n            dispatch(fetchPictures(start, limit))\r\n        }\r\n    }, [currentAlbum, start, limit, dispatch])\r\n\r\n//dispatch\r\n    const setCurrentPage = useCallback((page: number) => {\r\n        dispatch(setCurrentPageAC(page))\r\n    }, [dispatch])\r\n    const setCurrentAlbum = useCallback((albumId: number, start: number, limit: number) => {\r\n        dispatch(fetchAlbumPictures(albumId, start, limit))\r\n    }, [dispatch])\r\n    const removePictures = useCallback((picturesId: number) => {\r\n        dispatch(removePicturesAC(picturesId))\r\n    }, [dispatch])\r\n\r\n    const content = pictures.map((picture) => (\r\n        <div className={style.tileFragment} key={picture.id}>\r\n            <button className={style.deleteIcon} onClick={() => removePictures(picture.id)}>\r\n                x\r\n            </button>\r\n            <div className={style.containerActionAreaCard}>\r\n                <ActionAreaCard id={picture.id}\r\n                                thumbnailUrl={picture.thumbnailUrl}\r\n                                fullImageUrl={picture.url}\r\n                                text={picture.title}/>\r\n            </div>\r\n        </div>\r\n    ))\r\n\r\n    return (\r\n        <div className={style.scoreboard}>\r\n            <NavigationBar\r\n                limit={limit}\r\n                totalPicturesCount={totalPicturesCount}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                albums={albums}\r\n                setCurrentAlbum={(albumId) => setCurrentAlbum(albumId, start, limit)}\r\n            />\r\n            <div className={style.tile}>\r\n                {content}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import {FC} from 'react';\nimport style from './App.module.scss';\nimport {Scoreboard} from \"./components/scoreboard/Scoreboard\";\n\nexport const App: FC = () => {\n    return (\n        <div className={style.App}>\n            <div className={style.title}>\n                <h1>Picture-album</h1>\n            </div>\n            <Scoreboard/>\n        </div>\n    );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {ActionTypes, pictureReducer} from \"./picture-reducer\";\r\n\r\n\r\nexport let reducersBatch = combineReducers({\r\n    pictureReducer: pictureReducer\r\n});\r\n\r\nlet store = createStore(reducersBatch, applyMiddleware(thunkMiddleware));\r\n\r\n//types\r\nexport type ThunksType = ThunkAction<void, AppStateType, unknown, ActionTypes>;\r\nexport type AppStateType = ReturnType<typeof reducersBatch>\r\n\r\n\r\nexport default store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/redux-store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n;\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scoreboard\":\"Scoreboard_scoreboard__3Rlml\",\"tile\":\"Scoreboard_tile__2iDla\",\"tileFragment\":\"Scoreboard_tileFragment__2qEwN\",\"deleteIcon\":\"Scoreboard_deleteIcon__wH5wM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2hIHm\",\"title\":\"App_title__17WgH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigationBar\":\"NavigationBar_navigationBar__2qHq_\"};"],"sourceRoot":""}